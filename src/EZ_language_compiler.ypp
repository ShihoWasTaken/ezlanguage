%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <list>
#include <math.h> /* fmod , pow ... */
#include <cmath>

#include "../src/global.h"	 // we start from ../obj because it's important
#include "../src/main.cpp"	 // we start from ../obj because it's important
//#include "global.h"

#define YYERROR_VERBOSE
#define USE(VALUE) /*empty*/

extern FILE* yyin;
using namespace std;

 int yyparse (void);
 extern "C" int yylex();
 extern "C" void yyerror(const std::string&);
extern int yylineno;

%}


%token<numerical_value>	NUM_INTEGER			// ENTIER
%token<reel_value>	NUM_REAL			// REEL
%token<texte>	NAME RETOUR	STRING			// NOM
%token	COMMA  DEGRE POURCENT DIESE POINT QUOTE		// Caractères
%token TYPE_INTEGER TYPE_REAL TYPE_STRING TYPE_BOOLEAN			// variables type
%token  EGAL NE LT LE GT GE PLUS MINUS MULT DIVISE
%token	LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_ACCOLADE RIGHT_ACCOLADE LEFT_BRACKET RIGHT_BRACKET FIN BACK_LINE	// Special Characters
%token CONST  LOCAL  GLOBAL  IS  ARE SHARED		      		         // variables declaration
%token IF DO ELSE   						 // if else 
%token WHEN CASE  DEFAULT ENDWHEN				 // switch case ...
%token WHILE ENDWHILE							 // while .. do ..
%token REPEAT UNTIL ENDREPEAT 						 // do .. while ...
%token FOR IN STEP ENDFOR
%token FUNCTION PROCEDURE RETURN	 				 // functions
%token PRINT	
%token BEGINN END						       // can't use  'BEGIN'   
%token END_OF_FILE
%token CLASS PROGRAM MAIN DESTRUCT					//class

%left PLUS MINUS EGAL
%left NE LT LE GT GE MULT DIVISE AND OR XOR NOT MOD POW ABS OPERATOR		// Operators

%type<reel_value> expression single_expression designator statement_sequence function_call
%type<texte> next_line  function procedure  string operators

%start ROOT
%%

ROOT:
  next_line_null declaration_class PROGRAM MAIN next_line declaration_variables  statement_sequence END_OF_FILE { cout << "Fichier parsé." << endl; return 0;}
;

next_line_null: /* can be empty */
| next_line {}

next_line:  // one or several new line
  BACK_LINE {}
| next_line BACK_LINE {}
;


declaration_class:
| declaration_class class next_line {} 
;

declaration_methods:
/* empty */
| declaration_methods function next_line {}  
| declaration_methods procedure next_line {}
;

declaration_variables:
/* empty */
| declaration_variables   variable_with_scope {}
| declaration_variables   variable_without_scope {}
;

class:
CLASS NAME next_line BEGINN next_line  statement_sequence END next_endclass { cout << "declaration de la class" << $2 << endl; }
;

variable_without_scope:
     NAME IS shared type next_line { cout << "Declaration de la variable1 " << $1 << endl; }
|    NAME noms ARE shared type next_line { cout << "Declaration des variables1 "<< $1 << endl; }
|    affectation  next_line { } 
|    function_call next_line {}
;

variable_with_scope:
    portee NAME IS shared type next_line { cout << "Declaration de la variable2 " << $2 << endl; }
|   portee NAME noms ARE shared type next_line { cout << "Declaration des variables2 "<< $2 << endl; }
;

declaration_construct:
   NAME IS NAME {}  // ex: c is Maclasse
|  NAME IS NAME LEFT_PARENTHESIS class_liste_argument RIGHT_PARENTHESIS {} // c is MaClass(val1,va2)
|  NAME IS NAME LEFT_PARENTHESIS class_liste_argument_with_assignment RIGHT_PARENTHESIS {} // p is Person(nom="nom")
;

shared:
/* empty */
| SHARED { }
;

class_liste_argument:
  string { }
| NUM_INTEGER  {}
| NUM_REAL  {}
| NAME  {}
| string COMMA class_liste_argument  { }
| NUM_INTEGER COMMA class_liste_argument  {}
| NUM_REAL COMMA class_liste_argument  {}
| NAME COMMA class_liste_argument {} 
;

class_liste_argument_with_assignment:
  NAME EGAL string { }
| NAME EGAL NUM_INTEGER   {}
| NAME EGAL NUM_REAL  {}
| NAME EGAL NAME  {}
| NAME EGAL string COMMA class_liste_argument_with_assignment  { }
| NAME EGAL NUM_INTEGER COMMA class_liste_argument_with_assignment  {}
| NAME EGAL NUM_REAL COMMA class_liste_argument_with_assignment  {}
| NAME EGAL NAME COMMA class_liste_argument_with_assignment {} 
;


function:
shared FUNCTION NAME LEFT_PARENTHESIS liste_argument RIGHT_PARENTHESIS RETURN type next_line statement_sequence RETURN expression next_line END next_endfunction{  cout << "declaration de la fonction" << $3 << endl;}
;

procedure:
shared PROCEDURE NAME LEFT_PARENTHESIS liste_argument RIGHT_PARENTHESIS next_line statement_sequence END next_endprocedure {cout << "Declaration de la procedure " << $3 << endl;}
|shared PROCEDURE PRINT LEFT_PARENTHESIS  RIGHT_PARENTHESIS next_line statement_sequence END next_endprocedure {cout << "Surcharge de la methode d'affichage \"print\" "  << endl;}
;

next_endclass:
| CLASS {}
;

next_endprocedure:
/* emplty */
| PROCEDURE {}
;

next_endfunction:
/* empty */
| FUNCTION {}
;

next_endif:
/* empty */
| IF {}
;

next_endwhen:
/*empty */
| WHEN  {}
;

next_endcase:
/* empty*/
| CASE {}
;

next_endwhile:
/* empty */
|  WHILE {}
;

next_endrepeat:
/* empty */
| REPEAT {}
;

next_enddestruct:
/* empty */
| DESTRUCT {}
;

statement_sequence:
 /*empty */
| statement_sequence statement{ }
;

liste_argument:
 // No argument
 | NAME IS type { }
 | NAME IS type COMMA liste_argument { }
 | NAME noms ARE type {}
;

destruct:
  DESTRUCT next_line statement_sequence  END next_enddestruct { cout << "destructeur " << endl;}
;

overloading:
  OPERATOR operators LEFT_PARENTHESIS NAME IS NAME RIGHT_PARENTHESIS RETURN type next_line statement_sequence END { cout << "operateur " <<  $2 << endl; }
;

operators:
 EGAL EGAL { $$ = "==";}
|  EGAL   { $$ = "=";}
|  NE  { $$= "!="; }
|  LT  { $$ =  "<"; }
|  LE  { $$ = "<=";}
|  GT  { $$ = ">";}
|  GE  { $$ = ">=";}
|  PLUS   {$$ ="+";}
|  MINUS  { $$ = "-";}
|  MULT   {$$ = "*";}
|  DIVISE { $$ =  "/";}
;

// 		---------------------------------------------------------------------
statement:
  next_line
| declaration_construct { cout << "declaration de constructeur" << endl;} 
| variable_with_scope {} 
| variable_without_scope {} 
| declaration_methods {}
| destruct {}
| printing {}
| overloading {} 
| IF expression DO statement_sequence ELSE statement_sequence END next_endif { printf("SI_SINON_ALORS \n"); }
| IF expression DO statement_sequence END next_endif { printf("SI   ALORS \n"); }
| WHEN expression IS next_line whenbody whendefault END next_endwhen {  printf("when .. case .. \n"); }
| WHILE expression DO  statement_sequence END next_endwhile { printf("WHILE .. DO .. \n"); }
| REPEAT statement_sequence UNTIL next_line expression next_line END next_endrepeat{ printf("REPEAT .. UNTIL .. \n"); }
| for {}
;
// 		---------------------------------------------------------------------

affectation:
  NAME EGAL expression { cout << "Affectation name " <<  endl; }
| NAME POINT NAME EGAL expression { cout << "Affectation name.name " <<  endl; }
| NAME PLUS PLUS { cout << "Affectation ++" <<  endl; }
| NAME MINUS MINUS {  cout << "Affectation --" <<  endl; }
| PLUS PLUS NAME  { cout << "++ Affectation " <<  endl; }
| MINUS MINUS NAME  { cout << "-- Affectation " <<  endl;  }
;

printing :
PRINT expressions  next_line { }
;

expressions:
  expression   { cout <<"affichage  : " <<  $1  << endl; }
| string    {   cout << "affichage  : " << $1 << endl; }
| expression COMMA expressions { cout <<"affichage  : " <<  $1 << endl; }
| string  COMMA expressions {   cout << "affichage : " << $1 << endl; }
;

for :
  FOR NAME IN NUM_INTEGER POINT POINT nbrOrName STEP nbrOrName next_line DO  statement_sequence ENDFOR { printf("FOR .. IN ... \n");}
| FOR NAME IN NUM_INTEGER POINT POINT function_call STEP expression next_line DO  statement_sequence ENDFOR { printf("FOR .. IN ... \n");}
;

function_call : 
NAME POINT NAME LEFT_PARENTHESIS RIGHT_PARENTHESIS {}
| NAME POINT NAME { }
;

nbrOrName:
  NUM_INTEGER  {}
| NUM_REAL
| NAME {}
;

portee: 
 LOCAL {}
| GLOBAL {}
;

type:
  TYPE_INTEGER { }
| TYPE_REAL   { } 
| TYPE_STRING  { } 
| TYPE_BOOLEAN  { }
;

noms:
  COMMA NAME noms {}
| COMMA NAME {}
;

whenbody: /* whenbody can't be empty */
  whenbody CASE expression statement_sequence END next_endcase next_line{}
| CASE  expression next_line statement_sequence next_line END next_endcase next_line {}
;

whendefault: /* May not be specified */
| DEFAULT statement_sequence END next_endcase next_line{}
;

string :
 STRING  { $$= $1;}
;

//For  those  rules in comment , the corresponding definition must be written by the C++ team because their (rules) have not effect.
expression:
  single_expression { $1 = $1 ;}  
| expression EGAL EGAL expression { /*$1 == $4;*/ } 
| expression NE expression {/* $1 != $3; */}
| expression LT expression { /*$1 < $3;*/ }
| expression LE expression {/* $1 <= $3;*/ }
| expression GT expression {/* $1 > $3 ;*/}
| expression GE expression { /*$1 >= $3 ;*/}
| expression PLUS expression {$$ = $1 + $3; }
| expression MINUS expression { $$ = $1 - $3; }
| expression MULT expression {$$ = $1 * $3 ;}
| expression DIVISE expression { $$ =  $1 / $3 ;}
| expression AND AND expression {/* $1 && $4;  */ }
| expression OR OR expression {/* $1 || $4 ; */ }
;

single_expression:   
  PLUS single_expression { $$ = $2;  }
| single_expression XOR single_expression { /* $1^$3 ; */}
| NOT single_expression { $$ = !$2 ; }
| single_expression MOD single_expression { $$ =  fmod($1,$3); }
| single_expression POW single_expression { $$ = pow($1, $3); }
| ABS single_expression { $$ = fabs($2);}
| LEFT_PARENTHESIS expression RIGHT_PARENTHESIS { $$ = $2 ;}
| NUM_REAL { $$ = $1;} //real
| NUM_INTEGER { $$ = $1;  }  // integer
| designator {}
| function_call {  $$ = $1;}

;

designator:
  NAME {  }

;

%%

void yyerror(const std::string& mess){
    std::cout << "Erreur trouvée à la ligne " << yylineno << " :  "<<mess  << std::endl;
}
