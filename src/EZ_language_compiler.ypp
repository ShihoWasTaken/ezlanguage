%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <list>
#include <string>
#include <vector>

#include "../src/global.h"	 // we start from ../obj because it's important
#include "../src/hash_table/Function.h"
#include "../src/hash_table/ScopeHashTable.h"
#include "../src/hash_table/Variable.h"
#include "../src/main.cpp"	 // we start from ../obj because it's important
#include "../src/modules/Class.h"
#include "../src/modules/Declaration.h"
#include "../src/modules/DeclarationFunction.h"
#include "../src/modules/DeclarationProcedure.h"
#include "../src/modules/Node.h"
#include "../src/modules/Program.h"



//#include "global.h"

#define YYERROR_VERBOSE
#define USE(VALUE) /*empty*/

extern FILE* yyin;
using namespace std;

 int yyparse (void);
 extern "C" int yylex();
 extern "C" void yyerror(const std::string&);
 extern "C" void yyprint(const std::string&);
extern int yylineno;

extern ScopeHashTable symbolTable;
%}


%token<numerical_value>	NUM_INTEGER			// ENTIER
%token<reel_value>	NUM_REAL			// REEL
%token<texte>	NAME RETOUR	STRING			// NOM
%token	COMMA  DEGRE POURCENT DIESE POINT QUOTE		// Caract√®res
%token<texte> TYPE_INTEGER TYPE_REAL TYPE_STRING TYPE_BOOLEAN			// variables typeVar
%token  EGAL NE LT LE GT GE PLUS MINUS MULT DIVISE
%token	LEFT_PARENTHESIS RIGHT_PARENTHESIS LEFT_ACCOLADE RIGHT_ACCOLADE LEFT_BRACKET RIGHT_BRACKET FIN BACK_LINE	// Special Characters
%token<texte> CONST  LOCAL  GLOBAL  IS  ARE SHARED		      		         // variables declaration
%token IF DO ELSE   						 // if else 
%token WHEN CASE  DEFAULT ENDWHEN				 // switch case ...
%token WHILE ENDWHILE							 // while .. do ..
%token REPEAT UNTIL ENDREPEAT 						 // do .. while ...
%token FOR IN STEP ENDFOR
%token FUNCTION PROCEDURE RETURN	 				 // functions
%token PRINT
%token BEGINN END						       // can't use  'BEGIN'
%token END_OF_FILE
%token CLASS PROGRAM  DESTRUCT					//class

%token LENGTH TOUPPERCASE TOLOWERCASE
%token SUBSTRING SPLIT STRIP
%token REPLACE CONTAINS
%token FIND FINDFIRSTOF FINDLASTOF

%token ARRAY VECTOR LIST SET MAP OF

%left PLUS MINUS EGAL
%left NE LT LE GT GE MULT DIVISE AND OR XOR NOT MOD POW ABS OPERATOR		// Operators

%type<texte> type operators portee string designator
%type<arbre> expression statement_sequence function_call single_expression
%type<arbre> next_line  function procedure class
%type<arbre> ROOT declaration_class declarations_list declaration_variables declaration_methods variable_with_scope variable_without_scope
%type<vecString> liste_argument

%start ROOT
%%

ROOT:
  next_line_null PROGRAM NAME next_line declaration_class declarations_list PROCEDURE NAME LEFT_PARENTHESIS RIGHT_PARENTHESIS next_line statement_sequence  END  END_OF_FILE
	{
    	Node* p_decl_class = $5;
        Node* p_decl_list = $6;
        Node* p_prog = $12;
        p_decl_class->setRightSon(p_decl_list);
        p_decl_list->setRightSon(p_prog);

		Program *racine = new Program($3,p_decl_class);

        cout << racine->translate() << endl;
        return 0;
	}
;

next_line_null: /* can be empty */
| next_line {}

next_line:  // one or several new line
  BACK_LINE {}
| next_line BACK_LINE {}
;

declarations_list:
  /* no declaration */
| declaration_variables  declaration_methods
	{
		PDVariables* vars = (PDVariables*) $1;
		PDFunctions* functs = (PDFunctions*) $2;
		$1->setRightSon(functs);
		$$ = vars;
	}

declaration_class:
| class declaration_class next_line
	{
		Class* c = (Class *) $1;
		$1->setRightSon($2);
		$$ = c;
	}
;

declaration_methods:
 	{ $$ = NULL;}
| function next_line declaration_methods
	{
		DeclarationFunction* f = (DeclarationFunction*) $1;
		f->setRightSon($2);
		$$ = f;
	}
| procedure next_line declaration_methods
	{
		DeclarationProcedure* p = (DeclarationProcedure*) $1;
		p->setRightSon($2);
		$$ = p;
	}
;

declaration_variables:
 	{ $$ = NULL;}
| variable_with_scope declaration_variables
	{
	}
| variable_without_scope declaration_variables
	{
		$$ = new Declaration();
	}

class:
  CLASS NAME next_line BEGINN next_line statement_sequence END next_endclass
	{
		$$ = new Class();
	}
;


start_with_name:
   variable_without_scope  next_line { }
|  affectation  next_line { }
|  function_call next_line {}
;

variable_without_scope:
  NAME IS  type affect
	{
		Variable v($1,$3);
		symbolTable.addElement(v);
		$$ = new Declaration($1,$3,"",false);
	}
| NAME noms ARE  type affect
	{
		cout << "Declaration des variables1 "<< $1 << endl;
	}
| NAME IS SHARED type affect
	{
		cout << "Declaration de la variable1 " << $1 << endl;
	}
| NAME noms ARE SHARED type affect
	{
		cout << "Declaration des variables1 "<< $1 << endl;
	}
| declaration_construct
	{
		cout << " declaration de contructeur " << endl ;
	}
;

variable_with_scope:
  portee NAME IS type affect next_line
  	{
  		Variable v($2,$4);
  		symbolTable.addElement(v);
  		$$ = new Declaration($2,$4,$1,false);
  	}
| portee NAME noms ARE type next_line
	{
		cout << "  Declaration des variables  avec portee "<< $2 << endl;
	}
| portee NAME IS SHARED type affect next_line
	{
		Variable v($2,$4);
		symbolTable.addElement(v);
		$$ = new Declaration($2,$4,$1,true);
	}
| portee NAME noms ARE SHARED type next_line
	{
		cout << "  Declaration des variables  avec portee "<< $2 << endl;
	}
;

declaration_construct:
   NAME IS NAME {}  // ex: c is Maclasse
|  NAME IS NAME LEFT_PARENTHESIS class_liste_argument RIGHT_PARENTHESIS {} // c is MaClass(val1,va2)
|  NAME IS NAME LEFT_PARENTHESIS class_liste_argument_with_assignment RIGHT_PARENTHESIS {} // p is Person(nom="nom")
;

affect:
/* No assigned value */
| EGAL expression { }
| EGAL string { }
;

class_liste_argument:
  string { }
| NUM_INTEGER  {}
| NUM_REAL  {}
| NAME  {}
| string COMMA class_liste_argument  { }
| NUM_INTEGER COMMA class_liste_argument  {}
| NUM_REAL COMMA class_liste_argument  {}
| NAME COMMA class_liste_argument {}
;

class_liste_argument_with_assignment:
  NAME EGAL string { }
| NAME EGAL NUM_INTEGER   {}
| NAME EGAL NUM_REAL  {}
| NAME EGAL NAME  {}
| NAME EGAL string COMMA class_liste_argument_with_assignment  { }
| NAME EGAL NUM_INTEGER COMMA class_liste_argument_with_assignment  {}
| NAME EGAL NUM_REAL COMMA class_liste_argument_with_assignment  {}
| NAME EGAL NAME COMMA class_liste_argument_with_assignment {}
;

function:
  SHARED FUNCTION NAME LEFT_PARENTHESIS liste_argument { symbolTable.incScope(); } RIGHT_PARENTHESIS RETURN type next_line  BEGINN  next_line statement_sequence RETURN expression next_line END next_endfunction
	{
		cout << "declaration de la fonction " << $3 << endl;
	}
| FUNCTION NAME LEFT_PARENTHESIS liste_argument { symbolTable.incScope(); } RIGHT_PARENTHESIS RETURN type next_line  BEGINN  next_line statement_sequence RETURN expression next_line END next_endfunction{  cout << "declaration de la fonction" << $2 << endl;}
	{
		DeclarationFunction *f = new DeclarationFunction($2,$4,$8,$12,"blabla");
		$$ = f;
		//$$ = new Declaration();
		symbolTable.decScope();
	}
;

procedure:
  PROCEDURE PRINT LEFT_PARENTHESIS  RIGHT_PARENTHESIS next_line statement_sequence END next_endprocedure
  	{
  		cout << "Surcharge de la methode d'affichage \"print\" "  << endl;
  	}
| SHARED PROCEDURE NAME LEFT_PARENTHESIS liste_argument RIGHT_PARENTHESIS next_line statement_sequence END next_endprocedure
	{
		cout << "Declaration de la procedure " << $3 << endl;
	}
| SHARED PROCEDURE PRINT LEFT_PARENTHESIS  RIGHT_PARENTHESIS next_line statement_sequence END next_endprocedure
	{
		cout << "Surcharge de la methode d'affichage \"print\" "  << endl;
	}
| PROCEDURE NAME LEFT_PARENTHESIS liste_argument { symbolTable.incScope(); } RIGHT_PARENTHESIS next_line statement_sequence  END next_endprocedure
	{
		DeclarationProcedure *f = new DeclarationProcedure($2,$4,$8);
		$$ = f;
		//$$ = new Declaration();
		symbolTable.decScope();
	}
;

next_endclass:
| CLASS {}
;


next_endprocedure:
/* empty */
| PROCEDURE {}
;

next_endfunction:
/* empty */
| FUNCTION {}
;

next_endif:
/* empty */
| IF {}
;

next_endwhen:
/*empty */
| WHEN  {}
;

next_endcase:
/* empty*/
| CASE {}
;

next_endwhile:
/* empty */
|  WHILE {}
;

next_endrepeat:
/* empty */
| REPEAT {}
;

next_enddestruct:
/* empty */
| DESTRUCT {}
;
statement_sequence:
 /*empty */  { $$ = new Declaration();}
| statement_sequence statement{ }
;

// TODO
liste_argument:
 /* No argument */ { vector<Variable> v; $$ = v;}
 | NAME IS type
 	{
 		vector<Variable> v;
 		v.push_back(Variable($1,$3));
 		$$ = v;
 	}
 | NAME IS type COMMA liste_argument
 	{
 		$5.push_back(Variable($1,$3));
 		$$ = $5;
 	}
 | NAME noms ARE type {}
;

destruct:
  DESTRUCT next_line statement_sequence  END next_enddestruct { cout << "destructeur " << endl;}
;

overloading:
  OPERATOR operators LEFT_PARENTHESIS NAME IS NAME RIGHT_PARENTHESIS RETURN type next_line statement_sequence END { cout << "operateur " <<  $2 << endl; }
;

operators:
 EGAL EGAL { $$ = "==";}
|  EGAL   { $$ = "=";}
|  NE  { $$= "!="; }
|  LT  { $$ =  "<"; }
|  LE  { $$ = "<=";}
|  GT  { $$ = ">";}
|  GE  { $$ = ">=";}
|  PLUS   {$$ ="+";}
|  MINUS  { $$ = "-";}
|  MULT   {$$ = "*";}
|  DIVISE { $$ =  "/";}
;

// 		---------------------------------------------------------------------
statement:
  next_line
| variable_with_scope  {}
| start_with_name {}  // variables - functions - construct
| declaration_methods {}
| destruct {}
| printing {}
| overloading {}
| IF expression DO statement_sequence ELSE statement_sequence END next_endif {}
| IF expression DO statement_sequence END next_endif {}
| WHEN expression IS next_line whenbody whendefault END next_endwhen {}
| WHILE expression DO  statement_sequence END next_endwhile {}
| REPEAT statement_sequence UNTIL next_line expression next_line END next_endrepeat{}
| for {}
;
// 		---------------------------------------------------------------------

affectation:
  NAME EGAL expression { cout << "Affectation " << $1 <<  endl; }
| NAME POINT NAME EGAL expression { cout << "Affectation " << $1 << "."<<$3 <<  endl; }
| NAME PLUS PLUS { cout << "Affectation ++" <<  endl; }
| NAME MINUS MINUS {  cout << "Affectation --" <<  endl; }
| PLUS PLUS NAME  { cout << "++ Affectation " <<  endl; }
| MINUS MINUS NAME  { cout << "-- Affectation " <<  endl;  }
;

printing :
PRINT expressions  next_line { }
;

expressions:
  expression   { cout <<"affichage  : " <<  $1  << endl; }
| string    {   cout << "affichage  : " << $1 << endl; }
| expression COMMA expressions { cout <<"affichage  : " <<  $1 << endl; }
| string  COMMA expressions {   cout << "affichage : " << $1 << endl; }
;

for :
  FOR NAME IN NUM_INTEGER POINT POINT nbrOrName STEP nbrOrName next_line DO  statement_sequence ENDFOR { }
| FOR NAME IN NUM_INTEGER POINT POINT function_call STEP expression next_line DO  statement_sequence ENDFOR { }
;

function_call : 
NAME POINT NAME LEFT_PARENTHESIS RIGHT_PARENTHESIS {}
| NAME POINT NAME { }
;


//    -----------------------------STRING METHODS----------------------------------------
function_string :
NAME POINT LENGTH LEFT_PARENTHESIS RIGHT_PARENTHESIS { printf("lENGTH() called \n"); }
| NAME POINT TOUPPERCASE LEFT_PARENTHESIS RIGHT_PARENTHESIS { printf("toUpperCase() called \n"); }
| NAME POINT TOLOWERCASE LEFT_PARENTHESIS RIGHT_PARENTHESIS { printf("toLowerCase() called \n"); }
| NAME POINT SUBSTRING LEFT_PARENTHESIS NUM_INTEGER RIGHT_PARENTHESIS { printf("SUBSTRING(int) called \n"); }
| NAME POINT SUBSTRING LEFT_PARENTHESIS NAME RIGHT_PARENTHESIS { printf("SUBSTRING(int) called \n"); }
| NAME POINT SUBSTRING LEFT_PARENTHESIS NUM_INTEGER COMMA NUM_INTEGER RIGHT_PARENTHESIS { printf("SUBSTRING(int,int) called \n"); }
| NAME POINT SUBSTRING LEFT_PARENTHESIS NAME COMMA NUM_INTEGER RIGHT_PARENTHESIS { printf("SUBSTRING(int,int) called \n"); }
| NAME POINT SUBSTRING LEFT_PARENTHESIS NUM_INTEGER COMMA NAME RIGHT_PARENTHESIS { printf("SUBSTRING(int,int) called \n"); }
| NAME POINT SUBSTRING LEFT_PARENTHESIS NAME COMMA NAME RIGHT_PARENTHESIS { printf("SUBSTRING(int,int) called \n"); }
| NAME POINT SPLIT LEFT_PARENTHESIS STRING RIGHT_PARENTHESIS { printf("SPLIT(\"str\") called \n"); }
| NAME POINT STRIP LEFT_PARENTHESIS RIGHT_PARENTHESIS { printf("strip() called \n"); }
| NAME POINT STRIP LEFT_PARENTHESIS STRING RIGHT_PARENTHESIS { printf("strip(\"str\") called \n"); }
| NAME POINT REPLACE LEFT_PARENTHESIS STRING COMMA STRING RIGHT_PARENTHESIS { printf("replace(\"str\",\"str\") called \n"); }
| NAME POINT CONTAINS LEFT_PARENTHESIS STRING RIGHT_PARENTHESIS { printf("contain(\"str\") called \n"); }
| NAME POINT FIND LEFT_PARENTHESIS STRING RIGHT_PARENTHESIS { printf("find(\"str\") called \n"); }
| NAME POINT FINDFIRSTOF LEFT_PARENTHESIS STRING RIGHT_PARENTHESIS { printf("findFirstOF(\"str\") called \n"); }
| NAME POINT FINDLASTOF LEFT_PARENTHESIS STRING RIGHT_PARENTHESIS { printf("findFirstOF(\"str\") called \n"); }
;


//    -----------------------------array Declaration----------------------------------------
array_declaration :
portee NAME IS ARRAY LEFT_BRACKET NUM_INTEGER POINT POINT NUM_INTEGER RIGHT_BRACKET OF type { printf("array declaration with lower and upper bound \n"); }
| portee NAME IS ARRAY LEFT_BRACKET NUM_INTEGER POINT POINT NAME RIGHT_BRACKET OF type { printf("array declaration with lower and upper bound \n"); }
| portee NAME IS ARRAY LEFT_BRACKET NAME POINT POINT NUM_INTEGER RIGHT_BRACKET OF type { printf("array declaration with lower and upper bound\n"); }
| portee NAME IS ARRAY LEFT_BRACKET NUM_INTEGER RIGHT_BRACKET OF type { printf("array declaration with size \n"); }
| portee NAME IS ARRAY LEFT_BRACKET NAME RIGHT_BRACKET OF type { printf("array declaration with size \n"); }
| portee NAME IS ARRAY LEFT_BRACKET NUM_INTEGER RIGHT_BRACKET OF type EGAL LEFT_ACCOLADE noms RIGHT_ACCOLADE { printf("array declaration  with initializer list \n"); }
| portee NAME IS ARRAY LEFT_BRACKET NAME RIGHT_BRACKET OF type EGAL LEFT_ACCOLADE noms RIGHT_ACCOLADE { printf("array declaration with size with initializer list \n"); }
;

//    -----------------------------vector Declaration----------------------------------------
vector_declaration :
portee NAME IS VECTOR OF type { printf("vector declaration  \n"); }
| portee NAME IS VECTOR LEFT_BRACKET NUM_INTEGER RIGHT_BRACKET OF type { printf("vector declaration with size \n"); }
| portee NAME IS VECTOR LEFT_BRACKET NAME RIGHT_BRACKET OF type { printf("vector declaration with size \n"); }
| portee NAME IS VECTOR OF type EGAL LEFT_ACCOLADE noms RIGHT_ACCOLADE { printf("vector declaration with initializer list \n"); }
;

//    -----------------------------list Declaration----------------------------------------
list_declaration :
portee NAME IS LIST OF type { printf("list declaration  \n"); }
| portee NAME IS LIST OF type EGAL LEFT_ACCOLADE noms RIGHT_ACCOLADE { printf("list declaration with initializer list \n"); }
;

//    -----------------------------set Declaration----------------------------------------
set_declaration :
portee NAME IS SET OF type { printf("set declaration  \n"); }
| portee NAME IS SET LEFT_BRACKET NUM_INTEGER RIGHT_BRACKET OF type { printf("set declaration with size \n"); }
| portee NAME IS SET LEFT_BRACKET NAME RIGHT_BRACKET OF type { printf("set declaration with size \n"); }
| portee NAME IS SET OF type EGAL LEFT_ACCOLADE noms RIGHT_ACCOLADE { printf("set declaration with initializer list \n"); }
;

//    -----------------------------map Declaration----------------------------------------
map_declaration :
portee NAME IS MAP OF LT type COMMA type GT { printf("map declaration  \n"); }
| map_declaration EGAL LEFT_ACCOLADE noms RIGHT_ACCOLADE { printf("map declaration with initializer list \n"); }
;


nbrOrName:
  NUM_INTEGER  {}
| NUM_REAL
| NAME {}
;

portee: 
 LOCAL { $$ = "local";}
| GLOBAL { $$ = "global";}
;

type:
  TYPE_INTEGER { $$ = "int";}
| TYPE_REAL   { $$ = "real";}
| TYPE_STRING  { $$ = "string";}
| TYPE_BOOLEAN  { $$ = "bool";}
;

//    -----------------------------Initializer List----------------------------------------
noms:
NAME {}
| COMMA NAME noms {}
| COMMA NAME {}
;

whenbody: /* whenbody can't be empty */
  CASE  expression next_line statement_sequence  END next_endcase next_line  { cout << "case body" << endl; }
| CASE  expression next_line statement_sequence  END next_endcase next_line whenbody { cout << "case body" << endl;}
;

whendefault: /* May not be specified */
| DEFAULT next_line statement_sequence  END next_endcase next_line{}
;

string :
 STRING  { $$ = $1; }
;

//For  those  rules in comment , the corresponding definition must be written by the C++ team because their (rules) have not effect.
expression:
 expression EGAL EGAL expression { $$ = new Declaration(); }
| expression NE expression {$$ = new Declaration();}
| expression LT expression { $$ = new Declaration(); }
| expression LE expression { $$ = new Declaration();}
| expression GT expression {$$ = new Declaration();}
| expression GE expression { $$ = new Declaration();}
| expression PLUS expression {$$ = new Declaration();}
| expression MINUS expression { $$ = new Declaration();}
| expression MULT expression {$$ = new Declaration();}
| expression DIVISE expression {$$ = new Declaration(); }
| expression AND AND expression { $$ = new Declaration();}
| expression OR OR expression {$$ = new Declaration(); }
| designator {$$ = new Declaration();}
| NUM_REAL { $$ = new Declaration(); } //real
| NUM_INTEGER {$$ = new Declaration(); }  // integer
| single_expression {yyprint("single_expression");  $$ = new Declaration();}

single_expression:   
  PLUS single_expression { $$ = new Declaration(); }
| single_expression XOR single_expression { $$ = new Declaration();}
| NOT single_expression {$$ = new Declaration();}
| single_expression MOD single_expression { $$ = new Declaration();}
| single_expression POW single_expression { $$ = new Declaration(); }
| ABS single_expression { $$ = new Declaration();}
| LEFT_PARENTHESIS expression RIGHT_PARENTHESIS { $$ = new Declaration();}
| designator {}
| function_call {  $$ = $1;}
| function_string {}
| map_declaration {}
| array_declaration {}
| vector_declaration   {}
| list_declaration  {}
| set_declaration {}
;

designator:
  NAME { $$=$1; }

;

%%

void yyerror(const std::string& mess){
    std::cout << "Erreur trouv√©e √† la ligne " << yylineno << " :  "<<mess  << std::endl;
}

void yyprint(const std::string& mess){
    std::cout << "[l" << yylineno << "] "<<mess  << std::endl;
}
